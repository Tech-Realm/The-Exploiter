import re
import subprocess
import os
import requests
import xml.etree.ElementTree as ET
import pandas as pd
from cherry import *

# Get the domain name from user input
DMname = str(input("What is the domain? "))

# Read the list of target domains from the file
with open('target.txt', 'r') as f:
    target_domains = f.read().splitlines()
    print(target_domains)

# Create a directory for each target domain
for domain in target_domains:
    os.makedirs(domain)

# Change the current working directory to the domain directory
os.chdir(DMname)

# Scan the domain using dnsmap
for domain in target_domains:
    out, error = subprocess.Popen(["dnsmap", f"{DMname}"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    out = out.decode()
    with open("scanned.txt", "w") as f:
        f.write(out)

# Extract IP addresses from the scanned output
def extract_ip_addresses(text):
    ip_addresses = re.findall(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', text)
    return ip_addresses

with open('scanned.txt', 'r') as f:
    text = f.read()

ip_addresses = extract_ip_addresses(text)

# Extract subdomains and their corresponding IP addresses
lines = text.split("\n")
subdomains = {}
for i, line in enumerate(lines):
    if re.search(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', line):
        subdomain = lines[i-1]
        ip_address = line.split(":")[1].strip()
        subdomains[subdomain] = ip_address

# Print subdomains and their corresponding IP addresses
print(subdomains.items())
for items in subdomains.items():
    print(items)

# Create a CherryTree document for the domain and add subdomains as nodes
ct = newdoc("root")
anum = []
for subdomain, ip_address in subdomains.items():
    a = (f"{subdomain}: {ip_address}\n")
    anum.append(a)
print(anum)
for elements in anum:
    ct = addnode(ct, "root", elements)

# Create a CherryTree document for the IP addresses and add them as child nodes to the root node
ct_ip = newdoc("IP.mit.edu")
for ip_address in ip_addresses:
    ct_ip = addnode(ct_ip, "IP.mit.edu", ip_address)

# Save the CherryTree documents as files
create(ct, "Domain/domain.ctd")
create(ct_ip, "IP/IP.ctd")

# Run nmap on the IP addresses and save the results to an XML file
out, error = subprocess.Popen(["nmap", "-Pn", "--system-dns", "-sV", "-iL", "ips.txt", "-oX", "scan_results.xml"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
out = out.decode()
with open("log_nmap.txt", "w") as f:
    f.write(out)

# Parse the XML file and extract relevant information
tree = ET.parse('scan_results.xml')
root = tree.getroot()
removed = []
for host in root.findall('./host'):
    ip_address = host.find('./address').attrib['addr']
    for port in host.findall('./ports/port'):
        port_num = port.attrib['portid']
        protocol = port.attrib['protocol']
        service_name = port.find('./service').attrib.get('name', 'unknown')
        product_name = port.find('./service').attrib.get('product', 'unknown')
        output = (f'{ip_address}:{port_num} ({protocol}) - {service_name} ({product_name})')
        pattern = r".*(?:80|443).*$"
        filtered_output = "\n".join(re.sub(pattern, "", line) for line in output.split("\n"))
        b = (filtered_output)
        removed.append(b)

# Create a pandas DataFrame from the extracted information and save it to an Excel file
filtered_list = [x for x in removed if x]
print(filtered_list)
array1 = filtered_list
pattern = re.compile(r'(?P<IP>\d+\.\d+\.\d+\.\d+):(?P<Port>\d+) \((?P<Protocol>\w+)\) - (?P<Service>\w+) (?:\((?P<Description>\w+)\))?')
data_list = []
for line in array1:
    match = pattern.match(line)
    if match:
        data_list.append(match.groupdict())
df = pd.DataFrame(data_list)
df.to_excel("data.xlsx")
# Create a CherryTree document for the scan results and add them as child nodes to the root node
ct_scan = newdoc("Scan Results")
for line in filtered_list:
    ct_scan = addnode(ct_scan, "Scan Results", line)

# Save the CherryTree document as a file
create(ct_scan, "Scan Results/scan_results.ctd")
